================================================================================
                                                   *telescope-file-browser.nvim*

`telescope-file-browser.nvim` is an extension for telescope.nvim. It helps you
efficiently create, delete, rename, or move files powered by navigation from
telescope.nvim.

The `telescope-file-browser` is setup via the `telescope` extension interface.
You can manage the settings for the `telescope-file-browser` analogous to how
you manage the settings of any other built-in picker of `telescope.nvim`. You
do not need to set any of these options.
>
require('telescope').setup {
  extensions = {
    file_browser = {
        -- use the "ivy" theme if you want
        theme = "ivy",
    }
  }
}
<
To get telescope-file-browser loaded and working with telescope, you need to
call load_extension, somewhere after setup function:
>
telescope.load_extension "file_browser"
<

The extension exports `file_browser`, `picker`, `actions`, `finder` modules via
telescope extensions:
>
require "telescope".extensions.file_browser
<
In particular:
- `file_browser`: constitutes the main picker of the extension
- `picker`: unconfigured equivalent of `file_browser` defaulting to extensiond
  defaults
- `actions`: extension actions make accessible for remapping and custom usage
- `finder`: low-level finders -- if you need to access them you know what you
  are doing

To find out more:
https://github.com/nvim-telescope/telescope-file-browser.nvim

  :h |telescope-file-browser.picker|
  :h |telescope-file-browser.actions|
  :h |telescope-file-browser.finders|


================================================================================
                                                 *telescope-file-browser.picker*

fb_picker.file_browser({opts})                      *fb_picker.file_browser()*
    List, create, delete, rename, or move files and folders of your cwd.
    Default keymaps in insert/normal mode:
      - `<cr>`: opens the currently selected file, or navigates to the
        currently selected directory
      - `<C-e>`: creates new file in current directory, creates new directory
        if the name contains a trailing '/'
        - Note: you can create files nested into several directories with
          `<C-e>`, i.e. `lua/telescope/init.lua` would create the file
          `init.lua` inside of `lua/telescope` and will create the necessary
          folders (similar to how `mkdir -p` would work) if they do not already
          exist
      - `<C-o>/o`: open file with system default application
      - `<C-r>/r`: rename currently selected file or folder
      - `<C-g>/g`: goto previous folder
      - `<C-y>/y`: copy multi selected file(s) or folder(s) recursively to
        current directory
      - `<C-f>/f`: toggle between file and folder browser
      - `<C-h>/h`: toggle hidden files
      - `<C-d/dd>`: remove currently or multi selected file(s) or folder(s)
        recursively
      - --/m`: move multi selected file(s) or folder(s) recursively to current
        directory in file browser


    Parameters: ~
        {opts} (table)  options to pass to the picker

    Fields: ~
        {path}     (string)   root dir to file_browse from (default:
                              vim.loop.cwd())
        {cwd}      (string)   root dir (default: vim.loop.cwd())
        {files}    (boolean)  start in file (true) or folder (false) browser
                              (default: true)
        {depth}    (number)   file tree depth to display (default: 1)
        {dir_icon} (string)   change the icon for a directory. (default: )
        {hidden}   (boolean)  determines whether to show hidden files or not
                              (default: false)



================================================================================
                                                *telescope-file-browser.actions*

The file browser actions are functions enable file system operations from
within the file browser picker. In particular, the actions include creation,
deletion, renaming, and moving of files and folders.

You can remap actions as follows:
>
local fb_actions = require "telescope".extensions.file_browser.actions
require('telescope').setup {
  extensions = {
    file_browser = {
      mappings = {
        ["n"] = {
          ["<C-a>"] = fb_actions.create_file,
          ["<C-d>"] = function(prompt_bufnr)
              -- your custom function logic here
              ...
            end
        }
      }
    }
  }
}
<

fb_actions.create_file({prompt_bufnr})              *fb_actions.create_file()*
    Creates a new file in the current directory of the |builtin.file_browser|.
    Notes:
    - You can create folders by ending the name in the path separator of your
      OS, e.g. "/" on Unix systems
    - You can implicitly create new folders by passing
      $/CWD/new_folder/filename.lua


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.rename_file({prompt_bufnr})              *fb_actions.rename_file()*
    Rename files or folders for |builtin.file_browser|.
    Notes:
    - Triggering renaming with multi selections opens `Batch Rename` window
      in which the user can rename/move files multi-selected files at once
    - In `Batch Rename`, the number of paths must persist: keeping a file name
      means keeping the line unchanged


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.move_file({prompt_bufnr})                  *fb_actions.move_file()*
    Move multi-selected files or folders to current directory in
    |builtin.file_browser|.
    Note: Performs a blocking synchronized file-system operation.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.copy_file({prompt_bufnr})                  *fb_actions.copy_file()*
    Copy file or folders recursively to current directory in
    |builtin.file_browser|.
    Note: Performs a blocking synchronized file-system operation.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.remove_file({prompt_bufnr})              *fb_actions.remove_file()*
    Remove file or folders recursively for |builtin.file_browser|.
    Note: Performs a blocking synchronized file-system operation.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.toggle_hidden({prompt_bufnr})          *fb_actions.toggle_hidden()*
    Toggle hidden files or folders for |builtin.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.open_file()                                *fb_actions.open_file()*
    Opens the file or folder with the default application.

    - Notes:
      - map fb_actions.open_file + fb_actions.close if you want to close the
        picker post-action
    - OS: make sure your OS links against the desired applications:
      - Linux: induces application via `xdg-open`
      - macOS: relies on `open` to start the program
      - Windows: defaults to default applications through `start`



fb_actions.goto_prev_dir({prompt_bufnr}, {bypass}) *fb_actions.goto_prev_dir()*
    Goto previous directory in |builtin.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)   The prompt bufnr
        {bypass}       (boolean)  Allow passing beyond the globally set
                                  current working directory


fb_actions.goto_cwd({prompt_bufnr})                    *fb_actions.goto_cwd()*
    Goto working directory of nvim in |builtin.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.toggle_browser({prompt_bufnr})        *fb_actions.toggle_browser()*
    Toggle between file and folder browser for |builtin.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr



