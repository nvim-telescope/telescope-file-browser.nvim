================================================================================
NVIM                                               *telescope-file-browser.nvim*

`telescope-file-browser.nvim` is an extension for telescope.nvim. It helps you
efficiently create, delete, rename, or move files powered by navigation from
telescope.nvim.

The `telescope-file-browser` is setup via the `telescope` extension interface.
You can manage the settings for the `telescope-file-browser` analogous to how
you manage the settings of any other built-in picker of `telescope.nvim`. You
do not need to set any of these options.
>
require('telescope').setup {
  extensions = {
    file_browser = {
        -- use the "ivy" theme if you want
        theme = "ivy",
    }
  }
}
<
To get telescope-file-browser loaded and working with telescope, you need to
call load_extension, somewhere after setup function:
>
telescope.load_extension "file_browser"
<

The extension exports `file_browser`, `actions`, `finder`, `_picker` modules
via telescope extensions:
>
require "telescope".extensions.file_browser
<
In particular:
- `file_browser`: constitutes the main picker of the extension
- `actions`: extension actions make accessible for remapping and custom usage
- `finder`: low-level finders -- if you need to access them you know what you
  are doing
- `_picker`: unconfigured `file_browser` ("privately" exported s.t. unlisted on
  telescope builtin picker)

To find out more:
https://github.com/nvim-telescope/telescope-file-browser.nvim

  :h |telescope-file-browser.picker|
  :h |telescope-file-browser.actions|
  :h |telescope-file-browser.finders|


================================================================================
PICKER                                           *telescope-file-browser.picker*

You can use the file browser as follows
>
:lua vim.api.nvim_set_keymap(
   "n",
   "<space>fb",
   "<cmd>lua require 'telescope'.extensions.file_browser.file_browser()<CR>",
   {noremap = true}
)
<

fb_picker.file_browser({opts})  *telescope-file-browser.picker.file_browser()*
    List, create, delete, rename, or move files and folders of your cwd.
    Notes
    - Default keymaps in insert/normal mode:
      - `<cr>`: opens the currently selected file, or navigates to the
        currently selected directory
      - `<A-c>/c`: Create file/folder at current `path` (trailing path
        separator creates folder)
      - `<A-r>/r`: Rename multi-selected files/folders
      - `<A-m>/m`: Move multi-selected files/folders to current `path`
      - `<A-y>/y`: Copy (multi-)selected files/folders to current `path`
      - `<A-d>/d`: Delete (multi-)selected files/folders
      - `<C-o>/o`: Open file/folder with default system application
      - `<C-g>/g`: Go to parent directory
      - `<C-e>/e`: Go to home directory
      - `<C-w>/w`: Go to current working directory (cwd)
      - `<C-t>/t`: Change nvim's cwd to selected folder/file(parent)
      - `<C-f>/f`: Toggle between file and folder browser
      - `<C-h>/h`: Toggle hidden files/folders
      - `<C-s>/s`: Toggle all entries ignoring `./` and `../`
      - `<bs>/` : Goes to parent dir if prompt is empty, otherwise acts
        normally
    - display_stat:
      - A table that can currently hold `date` and/or `size` as keys -- order
        matters!
      - To opt-out, you can pass { display_stat = false }; sorting by stat
        works regardlessly
      - The value of a key can be one of `true` or a table of `{ width =
        integer, display = function, hl = string }`
      - The flags can be incrementally changed via eg { date = true, size = {
        width = 20, hl = "ErrorMsg" } }
      - See make_entry.lua for an example on how to further customize



    Parameters: ~
        {opts} (table)  options to pass to the picker

    Fields: ~
        {path}              (string)         dir to browse files from,
                                             `vim.fn.expanded` automatically
                                             (default: vim.loop.cwd())
        {cwd}               (string)         dir to browse folders from,
                                             `vim.fn.expanded` automatically
                                             (default: vim.loop.cwd())
        {follow}            (boolean)        whether folder browser "follows"
                                             `path` rather than `cwd`
                                             (default: false)
        {grouped}           (boolean)        group initial sorting by
                                             directories and then files; uses
                                             plenary.scandir (default: false)
        {inital_browser}    (string)         initial browser mode, either
                                             "list", "tree" or user config
                                             (default: "list")
        {depth}             (number)         file tree depth to display,
                                             `false` for unlimited depth
                                             (default: 1)
        {auto_depth}        (boolean|table)  `telescope.find_files` if true or
                                             custom browser config if table
                                             (default: false)
        {select_buffer}     (boolean)        select current buffer if
                                             possible; may imply `hidden=true`
                                             (default: false)
        {hidden}            (boolean)        determines whether to show hidden
                                             files or not (default: false)
        {respect_gitignore} (boolean)        induces slow-down w/ plenary
                                             finder (default: false, true if
                                             `fd` available)
        {hide_parent_dir}   (boolean)        hide `../` in the file browser
                                             (default: false)
        {collapse_dirs}     (boolean)        skip dirs w/ only single
                                             (possibly hidden) sub-dir in
                                             file_browser (default: false)
        {quiet}             (boolean)        surpress any notification from
                                             file_brower actions (default:
                                             false)
        {dir_icon}          (string)         change the icon for a directory
                                             (default: )
        {dir_icon_hl}       (string)         change the highlight group of dir
                                             icon (default: "Default")
        {display_stat}      (boolean|table)  ordered stat; see above notes,
                                             (default: `{ date = true, size =
                                             true, mode = true }`)
        {hijack_netrw}      (boolean)        use telescope file browser when
                                             opening directory paths; must be
                                             set on `setup` (default: false)
        {use_fd}            (boolean)        use `fd` if available over
                                             `plenary.scandir` (default: true)
        {git_status}        (boolean)        show the git status of files
                                             (default: true if `git`
                                             executable can be found)
        {prompt_path}       (boolean)        Show the current relative path
                                             from cwd as the prompt prefix.
                                             (default: false)



================================================================================
ACTIONS                                         *telescope-file-browser.actions*

The file browser actions are functions enable file system operations from
within the file browser picker. In particular, the actions include creation,
deletion, renaming, and moving of files and folders.

You can remap actions as follows:
>
local fb_actions = require "telescope".extensions.file_browser.actions
require('telescope').setup {
  extensions = {
    file_browser = {
      mappings = {
        ["n"] = {
          ["<C-a>"] = fb_actions.create,
          ["<C-d>"] = function(prompt_bufnr)
              -- your custom function logic here
              ...
            end
        }
      }
    }
  }
}
<

fb_actions.create({prompt_bufnr})    *telescope-file-browser.actions.create()*
    Creates a new file or dir in the current directory of the
    |telescope-file-browser.picker.file_browser|.
    - Finder:
      - file_browser: create a file in the currently opened directory
      - folder_browser: create a file in the currently selected directory
    - Notes:
      - You can create folders by ending the name in the path separator of your
        OS, e.g. "/" on Unix systems
      - You can implicitly create new folders by passing
        $/CWD/new_folder/filename.lua


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.create_from_prompt({prompt_bufnr}) *telescope-file-browser.actions.create_from_prompt()*
    Creates a new file or dir via prompt in the current directory of the
    |telescope-file-browser.picker.file_browser|.
    - Notes:
      - You can create folders by ending the name in the path separator of your
        OS, e.g. "/" on Unix systems
      - You can implicitly create new folders by passing
        $/CWD/new_folder/filename.lua


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.rename({prompt_bufnr})    *telescope-file-browser.actions.rename()*
    Rename files or folders for |telescope-file-browser.picker.file_browser|.
    Notes:
    - Triggering renaming with multi selections opens `Batch Rename` window
      in which the user can rename/move files multi-selected files at once
    - In `Batch Rename`, the number of paths must persist: keeping a file name
      means keeping the line unchanged


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.move({prompt_bufnr})        *telescope-file-browser.actions.move()*
    Move multi-selected files or folders to current directory in
    |telescope-file-browser.picker.file_browser|.
    Note: Performs a blocking synchronized file-system operation.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.copy({prompt_bufnr})        *telescope-file-browser.actions.copy()*
    Copy file or folders recursively to current directory in
    |telescope-file-browser.picker.file_browser|.

    - Finder:
      - file_browser: copies (multi-selected) file(s) in/to opened dir (w/o
        multi-selection, creates in-place copy)
      - folder_browser: copies (multi-selected) file(s) in/to selected dir (w/o
        multi-selection, creates in-place copy)


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.remove({prompt_bufnr})    *telescope-file-browser.actions.remove()*
    Remove file or folders recursively for
    |telescope-file-browser.picker.file_browser|.
    Note: Performs a blocking synchronized file-system operation.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.toggle_hidden({prompt_bufnr}) *telescope-file-browser.actions.toggle_hidden()*
    Toggle hidden files or folders for
    |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.open()                      *telescope-file-browser.actions.open()*
    Opens the file or folder with the default application.

    - Notes:
      - map fb_actions.open + fb_actions.close if you want to close the picker
        post-action
    - OS: make sure your OS links against the desired applications:
      - Linux: induces application via `xdg-open`
      - macOS: relies on `open` to start the program
      - Windows: defaults to default applications through `start`



fb_actions.goto_parent_dir({prompt_bufnr}, {bypass}) *telescope-file-browser.actions.goto_parent_dir()*
    Goto parent directory in |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)   The prompt bufnr
        {bypass}       (boolean)  Allow passing beyond the globally set
                                  current working directory


fb_actions.goto_cwd({prompt_bufnr}) *telescope-file-browser.actions.goto_cwd()*
    Goto working directory of nvim in
    |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.change_cwd({prompt_bufnr}) *telescope-file-browser.actions.change_cwd()*
    Change working directory of nvim to the selected file/folder in
    |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.goto_home_dir({prompt_bufnr}) *telescope-file-browser.actions.goto_home_dir()*
    Goto home directory in |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.cycle_browser({prompt_bufnr}) *telescope-file-browser.actions.cycle_browser()*
    Cyles alphabetically between configured browsers for
    |telescope-file-browser.picker.file_browser|.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.toggle_all({prompt_bufnr}) *telescope-file-browser.actions.toggle_all()*
    Toggles all selections akin to |telescope.actions.toggle_all| but ignores
    parent & current directory
    - Note: if the parent or current directory were selected, they will be
      ignored (manually unselect with `<TAB>`)


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.select_all({prompt_bufnr}) *telescope-file-browser.actions.select_all()*
    Multi select all entries akin to |telescope.actions.select_all| but ignores
    parent & current directory
    - Note:
      - selected entries may include results not visible in the results popup.
      - if the parent or current directly was previously selected, they will be
        ignored in the selected state (manually unselect with `<TAB>`)


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.sort_by_size({prompt_bufnr}) *telescope-file-browser.actions.sort_by_size()*
    Toggle sorting by size of the entry.
    Note: initially sorts descendingly in size.


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.sort_by_date()      *telescope-file-browser.actions.sort_by_date()*
    Toggle sorting by last change to the entry.
    Note: initially sorts desendingly from most to least recently changed
    entry.



fb_actions.close_dir()            *telescope-file-browser.actions.close_dir()*
    Closes currently selected dir in tree-mode of
    |telescope-file-browser.picker.file_browser|.



fb_actions.increase_depth({prompt_bufnr}) *telescope-file-browser.actions.increase_depth()*
    Increases the folder search depth of the
    |telescope-file-browser.picker.file_browser|.
    - Note:
      - Most useful with `tree_view = true` to explore or perform actions
        across folders


    Parameters: ~
        {prompt_bufnr} (number)  The prompt bufnr


fb_actions.decrease_depth()  *telescope-file-browser.actions.decrease_depth()*
    Increases the folder search depth of the
    |telescope-file-browser.picker.file_browser|.
    - Note:
      - Most useful with `tree_view = true`



fb_actions.backspace()            *telescope-file-browser.actions.backspace()*
    If the prompt is empty, goes up to parent dir. Otherwise, acts as normal.




================================================================================
FINDERS                                         *telescope-file-browser.finders*

The file browser finders power the picker with both a file and folder browser.

fb_finders.browser({opts})          *telescope-file-browser.finders.browser()*
    Returns a finder that is populated with files and folders in `path`.
    - Notes:
     - Uses `fd` if available for more async-ish browsing and speed-ups


    Parameters: ~
        {opts} (table)  options to pass to the finder

    Fields: ~
        {path}   (string)   root dir to browse from
        {depth}  (number)   file tree depth to display, `false` for unlimited
                            (default: 1)
        {hidden} (boolean)  determines whether to show hidden files or not
                            (default: false)


fb_finders.finder({opts})            *telescope-file-browser.finders.finder()*
    Returns a finder that combines |fb_finders.browse_files| and
    |fb_finders.browse_folders| into a unified finder.


    Parameters: ~
        {opts} (table)  options to pass to the picker

    Fields: ~
        {path}              (string)   root dir to file_browse from (default:
                                       vim.loop.cwd())
        {cwd}               (string)   root dir (default: vim.loop.cwd())
        {follow}            (boolean)  folder browser follows `path` of file
                                       browser
        {files}             (boolean)  start in file (true) or folder (false)
                                       browser (default: true)
        {grouped}           (boolean)  group initial sorting by directories
                                       and then files (default: false)
        {depth}             (number)   file tree depth to display (default: 1)
        {hidden}            (boolean)  determines whether to show hidden files
                                       or not (default: false)
        {respect_gitignore} (boolean)  induces slow-down w/ plenary finder
                                       (default: false, true if `fd`
                                       available)
        {hide_parent_dir}   (boolean)  hide `../` in the file browser
                                       (default: false)
        {dir_icon}          (string)   change the icon for a directory
                                       (default: )
        {dir_icon_hl}       (string)   change the highlight group of dir icon
                                       (default: "Default")
        {use_fd}            (boolean)  use `fd` if available over
                                       `plenary.scandir` (default: true)
        {git_status}        (boolean)  show the git status of files (default:
                                       true)



 vim:tw=78:ts=8:ft=help:norl:
